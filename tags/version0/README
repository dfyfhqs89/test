This is a brand new version of gmp-ecm, under development. The current
files are:

COPYING - GNU GENERAL PUBLIC LICENSE
Makefile - to build the binary file 'ecm'
README - this file
aux.c - auxiliary functions (nb_digits, gcd of two unsigned int's)
bestd.c - routines to determine the best stage 2 parameters
check.mpl - Maple routines to check stage 2
cputime.h - auxiliary function to measure cpu time
ecm.c - factorization routine using the Elliptic Curve Method (currently empty)
ecm.h - header file for gmp-ecm
getprime.c - dynamic Eratosthenes sieve
main.c - main file for gmp-ecm and Pollard 'P-1'
pm1.c - Pollard 'P-1' factorization routine
poly.c - routines for polynomial arithmetic
stage2.c - common stage 2 implementation for ecm and Pollard 'P-1'

The main changes wrt gmp-ecm 4c are the following:

- the code is split in several files to make the code easier to maintain
	and compile
- the program now implements also Pollard 'P-1', and the stage 2 is common
	to both ecm and p-1 (use option -pm1 to call P-1).
- stage 1 is much more efficient, thanks to a dynamic implementation of
	 Eratosthenes sieve (see file getprime.c).
- stage 2 now uses algorithm POLYGCD instead of POLYEVAL (see Montgomery's
	dissertation). POLYGCD is more expensive, but uses O(n) memory instead
	of O(n log n) for POLYEVAL.

What remains to do:

- finish the hgcd and polygcd code in poly.c. The current code is quite 
	difficult to understand. To simplify the implementation, I think
	one should define a true polynomial struct, containing the degree,
	the allocated size (which may be larger than the degree), and a
	pointer to the list of coefficients.
- implement ECM stage 1 in ecm.c, and call stage2 from stage2.c.
- add Toom-Cook 3-way and 4-way in poly.c (for any length, not just
	powers of 3 and 4)
