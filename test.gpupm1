#!/bin/bash

set -u

# Test file for P-1 on GPU
#
# Copyright 2023
# Seth Troisi
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, see
# http://www.gnu.org/licenses/ or write to the Free Software Foundation, Inc.,
# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.

PM1="${1:-./ecm} -gpu -gpucurves 32 -pm1"
PM1noGPU=$(echo "${1-./ecm}" | sed -e "s/-gpu//" -e "s/-cgbn//")

GMPECM_DATADIR=${GMPECM_DATADIR:-.}

THIS_FILE="${0}"


# Exit statues returned by GMP-ECM:
# 0      Normal program termination, no factor found
# 1      Error
# 2      Composite factor found, cofactor is composite
# 6      (Probable) prime factor found, cofactor is composite
# 8      Input number found
# 10     Composite factor found, cofactor is a (probable) prime
# 14     (Probable) prime factor found, cofactor is a (probable) prime


# Call with "checkcode $? n" to check that return code is n
checkcode () {
  if [ $1 -eq $2 ]
  then
    return
  fi

  if [ -z ${BASH_LINENO} ]
  then
    echo "############### ERROR ###############"
    echo "Expected return code $2 but got $1"
  else
    FROM="${BASH_LINENO[0]}"
    printf "\n"
    printf "################### ERROR ####################\n"
    printf "Expected return code $2 but got $1 on line $FROM\n"
    printf -- "----------- SOURCE LINES %-2d and %-2d ----------\n" $((FROM-1)) $FROM
    LINE_AND_BEFORE=$(sed -n "$((FROM-1))p;$((FROM))p" "${THIS_FILE}")
    echo "$LINE_AND_BEFORE"
    printf "##############################################\n"
  fi
  exit 1
}

# Call with "checkfactorcount $FILE $step1 $step2 $unique" to check that
# step 1 finds $step1 factors and step 2 finds $step2 factors.
# and that $unique factors are found
checkfactorcount () {
  step1found=$(grep -c 'factor [0-9]* found in Step 1' < $1)
  step2found=$(grep -c 'factor [0-9]* found in Step 2' < $1)
  uniquefound=$(grep -c 'Factor found in step' < $1)
  if [ $step1found != $2 ]
  then
    echo "################### ERROR ###################"
    echo "Expected to find $2 factors in stage 1 found $step1found"
    exit 1
  fi
  if [ $step2found != $3 ]
  then
    echo "################### ERROR ###################"
    echo "Expected to find $3 factors in stage 2 found $step2found"
    exit 1
  fi
  if [ $uniquefound != $4 ]
  then
    echo "################### ERROR ###################"
    echo "Expected to find $4 unique factors found $uniquefound"
    exit 1
  fi
}

# test for stage 1 on GPU

# TODO add test for larger number than supported to test.gpuecm and here
# TODO add a warning if fewer than X curves

# No factors found
# All find factors
# Passing some numbers multiple times
# P-1 contains small factor to high power
# Finding composite factor 
# save / resume
#    Compare with CPU residuals

# Some primes with low B1/B2
# TODO

# TODO change this number
echo "SOMETHING*(2^31-1)" > inp.test.pm1
$PM1 -inp inp.test.pm1 -v 1e4 0 | tee test.output
grep -q "GPU P-1: factor 2147483647 found in Step 1" test.output; checkcode $? 0

# Factors at Never, B1 = 1000, 7000, 32000
printf "2^127-1\n2^139-1\n2^103-1\n2^109-1\n" > inp.test.pm1

$PM1 -inp inp.test.pm1 -v 100 0 > test.output; checkcode $? 0
checkfactorcount test.output 0 0 0

$PM1 -inp inp.test.pm1 -v 1000 0 > test.output checkcode $? 0
checkfactorcount test.output 1 0 1

$PM1 -inp inp.test.pm1 -v 7000 0 > test.output checkcode $? 0
checkfactorcount test.output 2 0 2

# Finds two prime factors
printf "SOMETHING" > inp.test.pm1
$PM1 -inp inp.test.pm1 -v 5000 0 > test.output; checkcode $? 0
cat test.output
checkfactorcount test.output 2 0 3


#### Unsupported Features ####

# Set a valid inp.test.pm1 file
echo "5248576754387960561*(2^31-1)" > inp.test.pm1

# must provide -inp
echo "123" | $PM1 -v 1e4; checkcode $? 1

# B2 must be set to zero
$PM1 -inp inp.test.pm1 -v 1e4; checkcode $? 1
$PM1 -inp inp.test.pm1 -v 1e4 1e4; checkcode $? 1


/bin/rm inp.test.pm1 test.output

echo
echo "PM1: $PM1"
echo "All GPU P-1 tests are ok."
