This is the README file for GPU version of GMP-ECM.
The GPU code will only work with NVIDIA GPU of compute capability greater
than 2.0.

Table of contents of this file

1. How to enable GPU code in GMP-ECM
2. Basic Usage
3. Advanced Usage


##############################################################################

1. How to enable GPU code in GMP-ECM

By default the GPU code is not enabled, to enable it you have to follow the 
instructions of INSTALL-ecm until the 'configure' step. Then add the
"--enable-gpu" argument to configure:
	
  $ ./configure --enable-gpu [other options]

This will configure the code for NVIDIA GPU of compute capability 2.0. You can
specify for which compute capability you want to compile the code:

  $ ./configure --enable-gpu=sm_20   # for NVIDIA GPU of compute capability 2.0
  or
  $ ./configure --enable-gpu=sm_21   # for NVIDIA GPU of compute capability 2.1
  or
  $ ./configure --enable-gpu=sm_30   # for NVIDIA GPU of compute capability 3.0
  
By default, GMP-ECM will look for cuda in /usr/local/cuda, but you can specify
an other directory:

  $ ./configure --enable-gpu --with-cuda=/PATH/DIR

Some versions of CUDA are not compatible with recent versions of gcc.
To specify which C compiler is called by the CUDA compiler nvcc, type:

  $ ./configure --enable-gpu --with-cc-for-cuda=/PATH/DIR 
  
The value of this parameter is directly passed to nvcc via the option
"--compiler-bindir". By default, GMP-ECM lets nvcc choose what C compiler it
uses.

Then, to compile the code, type:

  $ make

And to check that the program works correctly, type:

  $ make check

##############################################################################

2. Basic Usage

To use your GPU for step 1, just add the -gpu option:

  $ echo "(2^835+1)/33" | ./ecm -gpu 1e4

It will compute step 1 on the GPU (the number of curves by default cannot be
changed for now), and then perform step 2 on the CPU (not in parallel).

The only parametrization compatible with GPU code is "-param 3". 

You can save the end of step 1 with "-save" and then load the file to execute
step 2. But you cannot resume to continue step 1 with a bigger B1.

The options "-mpzmod", "-modmuln", "-redc", "-nobase2" and "-base2" have no
effect on step 1, if the "-gpu" option is activated, but will apply for step 2.

##############################################################################

3. Advanced Usage

The option "-gpudevice n" forces the GPU code to be executed on device n. Nvidia
tool "nvidia-smi" can be used to know to which number is associated a GPU.
Moreover, you can use GMP-ECM option "-v" (verbose) to see on which GPU the code
is executed and what its compute capability is. GMP-ECM is compiled for a given
compute capability (by default 2.0) by using --enable-gpu=sm_xy in ./configure,
then the GPU code can only be executed on GPU with equal or higher compute
capability.

The option "-gpucurves n" forces GMP-ECM to compute n curves in parallel on the
GPU. By default, the number of curves is choose to fill completly the GPU. The
number of curves must be a multiple of the number of curves by multiprocessors
(which depend on the GPU compute capability) or else it would be rounded to the
next multiple.

The modular arithmetic on GPU can only handle integers smaller that 2^1018. The 
execution time does not depend on the size of the interger that is factored as
the same code is used for all integers.

##############################################################################

Please report to Cyril.Bouvier@loria.fr any problems, bugs, ...

