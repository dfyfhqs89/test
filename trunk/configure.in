m4_define([ECM_VERSION], 6.3-rc2)

AC_PREREQ(2.57)
AC_INIT(ecm, ECM_VERSION, [ecm-discuss@lists.gforge.inria.fr])
AC_CONFIG_HEADER([config.h])
AC_CONFIG_MACRO_DIR([m4])
GMP_INIT(config.m4)
AM_INIT_AUTOMAKE([1.10])
AM_INIT_AUTOMAKE(ecm, ECM_VERSION)

# Don't make a shared library by default. Enable building a shared library
# by specifying "--enable-shared" on the ./configure command line
AC_CANONICAL_HOST
AC_DISABLE_SHARED
AC_PROG_LIBTOOL

dnl Checks for programs.
AC_PROG_CC
AM_PROG_AS
dnl the following is required to compile auxi.c according to autoconf 2.61
AM_PROG_CC_C_O

AC_ARG_WITH(gmp,         [  --with-gmp=DIR          GMP install directory ], [with_gmp_include=$withval/include with_gmp_lib=$withval/lib])
AC_ARG_WITH(gmp_include, [  --with-gmp-include=DIR  GMP include directory ], [with_gmp_include=$withval])
AC_ARG_WITH(gmp_lib,     [  --with-gmp-lib=DIR      GMP lib directory ], [with_gmp_lib=$withval])
AC_ARG_WITH(gwnum,       [  --with-gwnum=DIR        GWNUM source directory ], [with_gwnum=$withval])

############################
# Parse --enable-* options #
############################

dnl Assertions are enabled by default for beta/rc releases. The last parameter
dnl of AC_ARG_ENABLE() sets the default value.
AC_ARG_ENABLE(assert,
AS_HELP_STRING([--enable-assert], [enable ASSERT checking [[default=yes]]]),[],[enable_assert=yes])
if test "x$enable_assert" = xyes; then
  AC_DEFINE(WANT_ASSERT,1,[Define to 1 if you want assertions enabled])
fi

AC_ARG_ENABLE(shellcmd,
AS_HELP_STRING([--enable-shellcmd], [enable shell command execution [[default=no]]]),[],[])
if test "x$enable_shellcmd" = xyes; then
  AC_DEFINE(WANT_SHELLCMD,1,[Define to 1 if you want shell command execution])
fi

AC_ARG_ENABLE(openmp,
AS_HELP_STRING([--enable-openmp], [enable OpenMP multi-threading [[default=no]]]),[],[])

AC_ARG_ENABLE(sse2,
AS_HELP_STRING([--enable-sse2], [use SSE2 instructions in NTT code (default=yes for Pentium 4, no for others)]),
[],[])

AC_ARG_ENABLE(asm-redc,
AS_HELP_STRING([--enable-asm-redc], [use an asm redc [[default=yes on x86_64 and powerpc64, no on others]]]),[],[])

AC_ARG_ENABLE(memory-debug,
AS_HELP_STRING([--enable-memory-debug], [enable memory debugging [[default=no]]]),[],[])
if test "x$enable_memory_debug" = xyes; then
  AC_DEFINE(MEMORY_DEBUG, 1, [Define to 1 if you want memory debugging])
fi
AM_CONDITIONAL(MEMORY_DEBUG, [test "x$enable_memory_debug" = xyes])



dnl On Darwin, the config.guess script of autoconf 2.63 uses "cc" to 
dnl determine that the system is 64 bit capable, but "gcc" as selected
dnl by the configue script defaults to 32 bit mode. Here we check if we
dnl need to pass the -m64 flag to gcc to make 64 bit compilation work.

dnl Use C language for test compilation
AC_LANG(C)

CHECK_FOR_M64=no
if test "x$GCC" = xyes; then
  case $host in
    x86_64-apple-darwin* | powerpc64-*) CHECK_FOR_M64=yes;;
    *) ;;
  esac
fi

if test "x$CHECK_FOR_M64" = xyes; then
AC_MSG_CHECKING([whether gcc needs -m64 for 64 bit mode])
AC_PREPROC_IFELSE([AC_LANG_SOURCE([[
#ifndef __LP64__
#error
#endif
]])],
  dnl __LP64__ is defined, don't need -m64
  [AC_MSG_RESULT(no)], 
  dnl Not defined, need -m64
  [AC_MSG_RESULT(yes)
   dnl There's a configure test that processes assembly which does not
   dnl call the assembler via $CC, so setting CC="$CC -m64" does not work.
   dnl Translating the asm REDC code does not include $CPPFLAGS or 
   dnl $LDFLAGS, but $CCASFLAGS instead.
   CPPFLAGS="$CPPFLAGS -m64"
   LDFLAGS="$LDFLAGS -m64"
   CCASFLAGS="$CCASFLAGS -m64"]
)
dnl Try again to check that it works now
AC_PREPROC_IFELSE([AC_LANG_SOURCE([[
#ifdef __LP64__
#error
#endif
]])],
  [],
  [AC_MSG_ERROR([[GCC does not produce 64 bit code even with -m64]])]
)
fi


dnl Checks for typedefs, structures, and compiler characteristics.

dnl Check if compiler supports "const," if not define it to empty string
AC_C_CONST

dnl Check if compiler supports "inline," if not define it to 
dnl __inline__ or __inline or the empty string
AC_C_INLINE

dnl Check if both time.h and sys/time.h can be included
AC_HEADER_TIME

dnl Define size_t to something useable if standard headers don't
AC_TYPE_SIZE_T


dnl If OpenMP is enabled, check which command line parameter (if any)
dnl if required to make the compiler enable OpenMP
if test "x$enable_openmp" = xyes; then
  AC_OPENMP
fi

########################
# Enable asm redc code #
########################
# If --(en|dis)able-asm-redc not specified, choose default value
# Test if asm redc code is available for this cpu.
# Point ASMPATH to the correct subdirectory.

# asm_redc enabled by default for x86_64 and 64 bit PowerPC
if test "x$enable_asm_redc" = x; then
  case $host in
    x86_64* | powerpc-apple-darwin* | powerpc64-*-linux*) enable_asm_redc=yes;;
    *) enable_asm_redc=no;;
  esac
fi

if test "x$enable_asm_redc" = xyes; then
  case $host in
    pentium4-*-* | pentium3-*-* | viac7-*-* | i786-*-*) ASMPATH=pentium4;;
    athlon-*-*) ASMPATH=athlon;;
    x86_64-*-*)  ASMPATH=x86_64;; 
    powerpc-apple-darwin*) ASMPATH=powerpc64;;
    powerpc64-*-linux*)
			  ECM_INCLUDE(powerpc64/powerpc-defs.m4)
			  ASMPATH=powerpc64;;
    i[[56]]86-*-* | k[[78]]*-*-* | athlon*-*-* | pentiumpro-*-* | \
    pentium2-*-* | viac3*-*-* | i686-apple-darwin*)
    		   	  ASMPATH=athlon;;
    *) AC_MSG_ERROR([[asm redc not available on this machine $host]]);;
  esac

# do the necessary definitions and includes
  AC_DEFINE(NATIVE_REDC,1,[Define to 1 to use asm redc])
  test -n "$CCAS" || CCAS="$CC -c"
  AC_SUBST(CCAS)
  GMP_PROG_M4
  GMP_ASM_UNDERSCORE
  GMP_ASM_TEXT
  GMP_ASM_GLOBL
  GMP_ASM_TYPE 

  case $host in
    pentium3-*-*)
      echo "WARNING: Your processor is recognized as Pentium3."
      echo "         The asm code uses SSE2, and therefore it might"
      echo "         fail if your proc is indeed a P3, and not a"
      echo "         Pentium M. If you have compilation problems,"
      echo "         consider using --disable-asm-redc." ;;
    *)
  esac
fi
AM_CONDITIONAL(ENABLE_ASM_REDC, [test "x$enable_asm_redc" = xyes])


############################
# Enable SSE2 instructions #
############################
# Test if we should use SSE2 instructions and if the cpu supports them
if test "x$enable_sse2" = "x"; then
dnl Default: if we build for Pentium 4, enable SSE2 code for the NTT
  case $host in
    pentium4-*-* | viac7-*-* | i786-*-*) 
      enable_sse2=yes
    ;;
  esac
fi
if test "x$enable_sse2" = xyes; then
  AC_DEFINE(HAVE_SSE2,1,[Define to 1 to enable SSE2 instructions in NTT code])
  CFLAGS="$CFLAGS -msse2"
fi

########################
# Add GWNUM if desired #
########################
dnl If user wants GWNUM, check if the file exists (either as .a or .lib)
if test "x$with_gwnum" != "x"; then
  AC_CHECK_FILE([$with_gwnum/gwnum.a], [
    AC_DEFINE(HAVE_GWNUM, 1, [Define to 1 if gwnum.a or gwnum.lib exist])
    GWLIB="$with_gwnum/gwnum.a"
    CFLAGS="$CFLAGS -I$with_gwnum"
  ],[
    AC_CHECK_FILE([$with_gwnum/gwnum.lib], [
      AC_DEFINE(HAVE_GWNUM, 1, [Define to 1 if gwnum.a or gwnum.lib exist])
      GWLIB="$with_gwnum/gwnum.lib"
      CFLAGS="$CFLAGS -I$with_gwnum"
    ],[
      with_gwnum=
      AC_MSG_ERROR([Woltman's GWNUM library not found])
    ])
  ])
fi
AM_CONDITIONAL(WITH_GWNUM, [test "x$with_gwnum" != "x"])


dnl Checks for header files.
AC_FUNC_ALLOCA
AC_HEADER_STDC
AC_CHECK_HEADERS([math.h limits.h malloc.h strings.h sys/time.h unistd.h io.h signal.h fcntl.h])
AC_CHECK_HEADERS([windows.h])
AC_CHECK_HEADERS([ctype.h sys/types.h sys/resource.h])

dnl Checks for library functions that are not in GMP
AC_FUNC_STRTOD

dnl Check for GSL but don't add it to LIBS, since only rho uses it and
dnl we don't want all other binaries to depend on it. 
dnl If found, pass link flags to Makefile via GSL_LD_FLAGS
AC_CHECK_LIB([m],[cos])
GSL_LD_FLAGS=
dnl Check if "-lgslcblas" works. If yes, check if "-lgsl -lgslcblas" works.
dnl If both work, put "-lgsl -lgslcblas" in GSL_LD_FLAGS
AC_CHECK_LIB([gslcblas],[cblas_dgemm], dnl
 [AC_CHECK_LIB([gsl],[gsl_blas_dgemm], dnl
  [AC_DEFINE([HAVE_LIBGSL],1,[Define to 1 if you have the `gsl' library (-lgsl).])
   AC_DEFINE([HAVE_LIBGSLCBLAS],1,[Define to 1 if you have the `gslcblas' library (-lgslcblas).])
   GSL_LD_FLAGS="-lgsl -lgslcblas"], [], dnl
   dnl Here comes the "OTHER-LIBRARIES" field for AC_CHECK_LIB [gsl]:
   [-lgslcblas])])

AC_CHECK_FUNCS([floor sqrt pow fmod], [], AC_MSG_ERROR([required function missing]))
AC_CHECK_FUNCS([isascii memset strchr strlen strncasecmp strstr], [], AC_MSG_ERROR([required function missing]))
AC_CHECK_FUNCS([access unlink], [], AC_MSG_ERROR([required function missing]))
AC_CHECK_FUNCS([isspace isdigit isxdigit], [], AC_MSG_ERROR([required function missing]))
AC_CHECK_FUNCS([time ctime], [], AC_MSG_ERROR([required function missing]))
AC_CHECK_FUNCS([setpriority nice gethostname gettimeofday getrusage memmove signal fcntl fileno])

dnl FIXME: which win32 library contains these functions?
dnl AC_CHECK_FUNCS([GetCurrentProcess GetProcessTimes])
AC_CHECK_FUNCS([malloc_usable_size])


dnl If we use GCC, add some warning flags
if test "x$GCC" = xyes; then
  CFLAGS="-Wall -W -Wundef -pedantic $CFLAGS"
fi


dnl Find GMP and do some sanity checks
dnl Tests concerning the include directories.
if test -d "$with_gmp_include"; then
  dnl AC_CHECK_HEADERS and AC_PREPROC_IFELSE uses CPPFLAGS but not CFLAGS
  CPPFLAGS="-I$with_gmp_include $CPPFLAGS"
else
  with_gmp_include=
fi
AC_CHECK_HEADERS([gmp.h], [], AC_MSG_ERROR([required header file missing]))

dnl This needs to find only the header file so we can do it here, before
dnl we start looking for libgmp.a
AC_MSG_CHECKING([for recent GMP])
AC_PREPROC_IFELSE([AC_LANG_SOURCE([[
#include <gmp.h>
#if (__GNU_MP_VERSION < 4 || (__GNU_MP_VERSION == 4 && __GNU_MP_VERSION_MINOR < 1))
#error
#endif
]])],
  [AC_MSG_RESULT(yes)],
  [AC_MSG_RESULT(no)
   AC_MSG_ERROR([GMP 4.1.0 or newer is required])]
)

dnl Now choose how to link the GMP library. If we can, we'd prefer to
dnl link it statically since that makes for faster function calls. To
dnl link it statically, we mustn't build a dynamic GMP-ECM library and
dnl we need to find the libgmp.a file. At the moment, we only look for
dnl it at the path specified by the user (i.e. --with-gmp) but make no
dnl attempt to find it in the default system lib directories.

dnl If GMP is linked statically, we pass its path/filename to the Makefile
dnl via GMPLIB, otherwise -lgmp is passed via GMPLIB.
dnl The search path to the dynamic GMP library is added to LDFLAGS, 
dnl if GMP is not specified by full pathname.

GMPLDFLAGS=""
if test -d "$with_gmp_lib"; then
  GMPLDFLAGS="-L$with_gmp_lib"
fi
GMPLIB="-lgmp"
if test "x$enable_shared" != xyes; then
  if test -r "$with_gmp_lib/libgmp.a"; then
    GMPLIB="$with_gmp_lib/libgmp.a"
dnl Don't need -L flag since we give full path to libgmp.a
    GMPLDFLAGS=""
  fi
fi
AC_SUBST(GMPLIB)
LDFLAGS="$LDFLAGS $GMPLDFLAGS"


dnl Test linking against GMP. This tests, for example, that the compiler
dnl and GMP agree on the ABI (32 or 64 bit). AC_CHECK_LIB() does not work,
dnl as it requires linking the library with -lgmp, whereas we may want
dnl to specify it by full pathname as we do in the Makefile

AC_MSG_CHECKING([whether we can link against GMP])
LIBS_BACKUP="$LIBS"
LIBS="$LIBS $GMPLIB"
AC_LINK_IFELSE([AC_LANG_PROGRAM([[
#ifdef HAVE_GMP_H
#include <gmp.h>
#endif]],[[
  mpz_t t;
  mpz_init(t);
  mpz_clear(t);
  return 0;
]])], AC_MSG_RESULT(yes),
   [AC_MSG_RESULT(no)
    AC_MSG_ERROR([Could not link against GMP library.])]
)

dnl Check for corresponding 'gmp.h' and libgmp.a
dnl This requires running a program linked against GMP, 
dnl so is done after the link-only test.
AC_MSG_CHECKING(if gmp.h version and libgmp version are the same)
AC_RUN_IFELSE([AC_LANG_PROGRAM([[
#include <stdio.h>
#include <string.h>
#include <gmp.h>
]],[[
char buffer[100];
if (__GNU_MP_VERSION == 4 && __GNU_MP_VERSION_MINOR <= 2 && 
    __GNU_MP_VERSION_PATCHLEVEL == 0)
  sprintf (buffer, "%d.%d", __GNU_MP_VERSION, __GNU_MP_VERSION_MINOR);
else
  sprintf (buffer, "%d.%d.%d", __GNU_MP_VERSION, __GNU_MP_VERSION_MINOR,
   __GNU_MP_VERSION_PATCHLEVEL);
printf ("(%s/%s) ", buffer, gmp_version);
return strcmp (buffer, gmp_version);
]])], AC_MSG_RESULT(yes),
   [AC_MSG_RESULT(no)
    AC_MSG_ERROR(['gmp.h' and 'libgmp' have different versions, you have to reinstall GMP properly.])],
    AC_MSG_RESULT([cross-compiling: cannot test])
)

AC_CHECK_FUNCS([__gmpn_add_nc __gmpn_mod_34lsub1])
LIBS="$LIBS_BACKUP"

dnl Check for xsltproc
AC_CHECK_PROG(XSLTPROC,xsltproc,xsltproc,)
if test "x$XSLTPROC" != x; then
  AC_MSG_CHECKING([for docbook.xsl])
  if test "x$XSLDIR" = x; then
    if test -d "/usr/local/share/sgml/docbook/xsl-stylesheets"; then
      XSLDIR="/usr/local/share/sgml/docbook/xsl-stylesheets"
    elif test -d "/usr/share/sgml/docbook/xsl-stylesheets"; then
      XSLDIR="/usr/share/sgml/docbook/xsl-stylesheets"
    elif test -d "/usr/local/share/docbook/"; then
      XSLDIR="/usr/local/share/docbook/"
    elif test -d "/usr/share/docbook/"; then
      XSLDIR="/usr/share/docbook/"
    fi
  fi
  if test -r "$XSLDIR/manpages/docbook.xsl"; then
    AC_MSG_RESULT(yes)
    make_manpage="yes"
  else
    AC_MSG_RESULT(no)
  fi
fi  
AM_CONDITIONAL(MAKE_MANPAGE, [test "x$make_manpage" = xyes])

case $host in
  athlon*-*-*) config_arch="athlon" ;;
  x86_64*-*-*) config_arch="athlon64" ;;
  pentium3-*-*) config_arch="pentium3" ;;
  pentium4-*-*) config_arch="pentium4" ;;
  alphaev6*-*-*) config_arch="alpha-ev6" ;;
  alphaev5*-*-*) config_arch="alpha-ev5" ;;
  powerpc7450-*-*) config_arch="powerpc7450" ;;
  powerpc-apple-darwin* | powerpc64-*-*) config_arch="powerpc970" ;;
  *) config_arch="default" ;;
esac


LIBS="$LIBS $GWLIB"

GMP_FINISH
AC_CONFIG_FILES([Makefile athlon/Makefile pentium4/Makefile x86_64/Makefile powerpc64/Makefile build.vc9/Makefile build.vc9/assembler/Makefile build.vc9/ecm/Makefile build.vc9/libecm/Makefile])
AC_CONFIG_LINKS([ecm-params.h:ecm-params.h.$config_arch])
MUL_FFT_PARAMS="mul_fft-params.h.$config_arch"
if ! test -f "$MUL_FFT_PARAMS"
then
  MUL_FFT_PARAMS="mul_fft-params.h.default"
fi
AC_CONFIG_LINKS([mul_fft-params.h:"$MUL_FFT_PARAMS"])

AC_SUBST(XSLDIR)
AC_SUBST(ASMPATH)
AC_SUBST(GSL_LD_FLAGS)

AC_OUTPUT

AC_MSG_NOTICE([Configuration:])
AC_MSG_NOTICE([Build for host type $host])

if test "x$enable_asm_redc" = xyes; then
  AC_MSG_NOTICE([Using asm redc code from directory $ASMPATH])
else
  AC_MSG_NOTICE([Not using asm redc code])
fi

if test "x$enable_sse2" = xyes; then
  AC_MSG_NOTICE([Using SSE2 instructions in NTT code])
else
  AC_MSG_NOTICE([Not using SSE2 instructions in NTT code])
fi

AC_MSG_NOTICE([Linking GMP with $GMPLIB])

if test "x$with_gwnum" != "x"; then
  AC_MSG_NOTICE([Linking with George Woltman's GWNUM])
fi

if test "x$enable_assert" = xyes; then
  AC_MSG_NOTICE([Assertions enabled])
else
  AC_MSG_NOTICE([Assertions disabled])
fi

if test "x$enable_shellcmd" = xyes; then
  AC_MSG_NOTICE([Shell command execution enabled])
else
  AC_MSG_NOTICE([Shell command execution disabled])
fi

if test "x$enable_openmp" = xyes; then
  AC_MSG_NOTICE([OpenMP enabled])
else
  AC_MSG_NOTICE([OpenMP disabled])
fi

if test "x$enable_memory_debug" = xyes; then
  AC_MSG_NOTICE([Memory debugging enabled])
else
  AC_MSG_NOTICE([Memory debugging disabled])
fi

