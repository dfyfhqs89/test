ToDo's:

1) efficiency/memory
- use mpres in step 2
- optimize memory usage in step 2 (use an unique array for multiplies)
- write a mpn version of add3 and duplicate  
- use/implement a mpn_mul_hi_n routine for use in mpn_REDC
- use mpn_addmul_2, mpn_addmul_4 in the basecase REDC [for machines
  where it exists]
- try McLaughlin's algorithm for Montgomery's modular multiplication
  (http://www.ams.org/mcom/0000-000-00/S0025-5718-03-01543-6/home.html)
- consider Colin Percival's generalized DWT for multiplication modulo
  k*a^n+b, where k*a*b is highly composite. May belong into GMP rather than
  gmp-ecm.
- implement Montgomery's idea of using to values d1, d2 (coprime and highly
  composite) for sieving when generating roots of F and G (cf. Speeding the
  Pollard and Elliptic Curve Methods of Factorizaion, 9.1.3)
- perform PolyFromRoots/Polyeval level by level (add one parameter i which
	says which level has to be performed, and save/restore the
	corresponding data to/from file)

2) interface
- Add -go <NUM> to the input syntax.  This will allow the user to input
  a known group order.  <NUM> can be a simple number, a simple expression,
  or an express which uses the special letter 'N'.  Each curve, if there
  is an 'N' in the expression (or more than one), the value of the
  current N number is substituded into the expression and then the
  expression is re-computed.  
  Tasks done so far:
  argument processing in main.c  (done)
  Built a mpgocandi_t to keep track of the group order items (done)
  Added parameters (mpz_t) to ecm, pp1, pm1 (and the stage1 for each).
  Added code into pm1_stage1()
  In pm1_stage1() the starting p^(N-1) is still left in at this time.
  In ecm_stage1() and pp1_stage1() the go data is not yet used.
  Chapter 10 of README needs a better description.  I started one, but it's not done.
- with -resume, print %time for THIS RUN instead of total run?
	[suggested by SleepHound <sleephound@yahoo.com>]
- when resuming, print the *initial* x0 for P-1/P+1?
- option -base2 to force base2 when res/lo > threshold?

3) documentation
- document how to use the ecm(), pm1(), pp1() functions from a C program
  (may need changes to give parameters or options)
  -> best way is to have a separate library libecm.a

5) new features
- implement Brent-Suyama's extension for p+1 (how to do it efficiently?
  Could "Powers of 2^(k/2) and 3^k", Montgomery dissertation, 5.5, work?)

