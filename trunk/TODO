ToDo's:

0) configure
- check getrusage in configure, update cputime (auxlib.c)
- add --enable-ntt or similar so that ecm_ntt.c, mpzspm.c, mpzspv.c, spm.c,
  spv.c are conditionally compiled. Similarly make --with-gwnum conditionally
  compile Fgw.c instead of making it conditionally nonempty, as ISO C rejects
  empty source files.

1) efficiency/memory
- use mpres in step 2 (Target: 7.0)
- [suggested by Torbjo"rn Granlund] add an option -maxmem nnn that
  chooses the best k for stage 2, depending on the input number size.
- write a mpn version of add3 and duplicate  
- use/implement a mpn_mul_hi_n routine for use in mpn_REDC
- use mpn_addmul_2, mpn_addmul_4 in the basecase REDC [for machines
  where it exists]
- try McLaughlin's algorithm for Montgomery's modular multiplication
  (http://www.ams.org/mcom/0000-000-00/S0025-5718-03-01543-6/home.html)
- consider Colin Percival's generalized DWT for multiplication modulo
  k*a^n+b, where k*a*b is highly composite. May belong to GMP rather than
  GMP-ECM.
- implement assembly code (redc.asm) for other architectures
  (rename it to redc.s, add AM_PROG_AS in configure.in, add an option
	--want_asm or similar)
- allow composite d2 (Target: perhaps 6.1)
- init mpz_t's with correct amount of memory allocated to avoid reallocs.
  Check for reallocs with GMP's memory interface routines. (Target: 6.1? 7.0?)
- try sliding window multipliation for ECM stage 1 (Target: 7.0)
- choose Brent/Suyama polynomial according to B2/k and not B2!
- Compute roots of F/G in Montgomery coordinates if S==1 (Target: 6.1)

2) interface
- with -resume, print %time for THIS RUN instead of total run?
	[suggested by SleepHound <sleephound@yahoo.com>]
- when resuming, print the *initial* x0 for P-1/P+1?
- [from Jakub Pawlewicz <pan@mimuw.edu.pl>] add an option -stage1time t
  to tell the step 1 time, when done by another program. PZ: or better
  have it in resume file? (Target: 6.1)
- move parameter selection (d,d2,dF,k) into pm1(), pp1(), ecm() so 
  expected curves and actual B2 can be printed immediately. (Target: 6.1)

3) documentation
- check README is up-to-date wrt tune/tune2 (and merge tune/tune2)
- add examples for typical use to README 
  (see http://www.mersenneforum.org/showthread.php?t=3922)

4) others
- add an option to execute a shell command (such as sending an email) 
  when something interesting happens (factor found, program finished) ?
